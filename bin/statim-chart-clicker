#!/usr/bin/env perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../lib/";

use Statim;
use Statim::Client;
use Getopt::Long;
use DateTime;
use Data::Dumper;
use Chart::Clicker;
use Chart::Clicker::Data::Series;
use Chart::Clicker::Renderer::Area;

my $client      = undef;
my $client_host = '127.0.0.1';
my $client_port = '12345';
my $client_collection;
my @client_enum;
my $client_count;

my $client_ts;
my $client_lastseconds;

my $output = 'file.png';
my $action;

sub parse_options {
    Getopt::Long::GetOptions(
        'h|help' => sub { $action = 'help' },
        'c|collection=s'  => \$client_collection,
        'e|enum=s'        => \@client_enum,
        'n|count=s'       => \$client_count,
        'o|output=s'      => \$output,
        'l|lastseconds=i' => \$client_lastseconds,
        't|ts=s'          => \$client_ts,
        'host=s'          => \$client_host,
        'port=i'          => \$client_port
    );

}

sub help {
    print <<EOF;
Usage: $0 [options] ...

Options:
  -h,--help        show this help
  --host           set statim server host
  --port           set statim server port
  -c,--collection  collection name
  -e,--enum        enum types and values to get
  -n,--count       name of count field
  -o,--output      output filename
  -t,--ts          time series period in epoch time, ex.: 123456780-123456790
  -l,--lastseconds last seconds
  

Examples:
   
    $0 -c collection1 -e bar:doo:lou -n foo

EOF
    exit(0);
}

sub get_now {
    my $dt = DateTime->now();
    return $dt->epoch;
}

sub connect_statim {
    $client = Statim::Client->new(
        {
            host => $client_host,
            port => $client_port
        }
    );
}

sub get_period {
    my $period = $client->period($client_collection);
    die "unknow collection" unless $period =~ /^OK/;
    $period =~ s/^OK //;
    chomp($period);
    return $period;
}

sub disconnect_statim {
    $client->quit;
}

sub get_periods {
    my $base = shift;
    my @periods;
    push( @periods, $base );
    foreach my $item ( 1 .. 30 ) {
        push( @periods, $base - ( $item * 84600 ) );
    }
    return @periods;
}

sub get_enums {
    my %keys;
    foreach my $item (@client_enum) {
        #warn $item;
        my ( $name, @values ) = split( ':', $item );
        $keys{$name} = \@values;
    }
    return %keys;
}

sub get_serie {
    
    return int(rand(15));

    my $res = $client->get(@_);
    $res =~ s/^OK //g;
    chomp($res);
    return $res;
}

sub get_cmds_to_get {
    my ( $ts, $data ) = @_;

    my %output;
    foreach my $serie ( @{$ts} ) {
        #warn $serie;
        foreach my $item ( keys %{$data} ) {
            #warn $item;
            #warn Dumper(\$data);
            foreach my $value ( @{ $data->{$item} } ) {
                #warn $value;
                my $ret = &get_serie(
                    $client_collection, "$item:$value",
                    "ts:$serie",        $client_count
                );
                $output{$serie}{$item}{$value} = $ret;
            }

        }

    }
    return %output;

}

sub do {
    if ($action) {
        &help;
    }
    &connect_statim;

    my $now     = &get_now;
    my $period  = &get_period;
    my @periods = &get_periods($now);

    print "now: $now\n";
    print "period: $period\n";

    print "periods: \n";
    print join( ' ', @periods );
    print "\n";

    #warn "get_enums";
    my %data = &get_enums;

#    print Dumper( \%data );

    my %gets = &get_cmds_to_get( \@periods, \%data );

    print Dumper( \%gets );

   my $cc = Chart::Clicker->new(width => 1000, height => 250, format => 'png');

    my @times;
    my @hours;
    my $i = 0;
    map { push(@times, $_); push(@hours, $i); $i++; } keys %gets;

    my @ts_chart;
    my @series;
    
    foreach my $time (@times) {
        foreach my $key ( keys $gets{$time} ) {
            map { push(@series, $gets{$time}{$key}{$_}) } keys $gets{$time}{$key};
        }
    }        
    
    push(@ts_chart,
        Chart::Clicker::Data::Series->new(
        keys    => \@hours,
        values  => \@series,
    ));

    #warn Dumper(\@times);
    #warn Dumper(\@series);

    my $ds = Chart::Clicker::Data::DataSet->new(series => \@ts_chart);
    $cc->title->padding->bottom(10);
    $cc->title->text('texto foo');

    $cc->add_to_datasets($ds);
    
    my $defctx = $cc->get_context('default');

    my $area = Chart::Clicker::Renderer::Area->new(opacity => .6);
    $area->brush->width(3);
    $defctx->renderer($area);
    
    $defctx->range_axis->label('Lorem');
    $defctx->domain_axis->label('Ipsum');

    $defctx->renderer->brush->width(2);

    &disconnect_statim;
    $cc->write_output('foo.png');

    return 0;
}

unless (caller) {
    &parse_options;
    &do;
}

